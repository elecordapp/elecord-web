# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration
# winget install git-cliff

# scopesorted.toml template

# ---

[changelog]
# A Tera template to be rendered as the changelog's header.
# See https://keats.github.io/tera/docs/#introduction
header = """
# Changelog\n
All notable changes to elecord-web will be documented in this file.\n
"""
# A Tera template to be rendered for each release in the changelog.
# See https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## {{ version | trim_start_matches(pat="v") }} - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## Unreleased
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        - *({{commit.scope}})* {{ commit.message | upper_first }}
        {%- if commit.breaking %}
        {% raw %}  {% endraw %}- **BREAKING**: {{commit.breaking_description}}
        {%- endif -%}
    {%- endfor -%}
    {% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if commit.scope -%}
        {% else -%}
            - {{ commit.message | split(pat="\n") | first | upper_first }}
            {% if commit.breaking -%}
            {% raw %}  {% endraw %}- **BREAKING**: {{commit.breaking_description}}
            {% endif -%}
        {% endif -%}
    {% endfor -%}
    {% raw %}\n{% endraw %}\
{% endfor %}\n
"""
# A Tera template to be rendered as the changelog's footer.
# See https://keats.github.io/tera/docs/#introduction
footer = """
<!-- generated by git-cliff -->
"""
# Remove leading and trailing whitespaces from the changelog's body.
trim = true


[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->🚀 Features" },
    { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
    { message = "^style", group = "<!-- 2 -->🎨 Styling" },
    { body = ".*security", group = "<!-- 3 -->🔒 Security" },
    { message = "^perf", group = "<!-- 4 -->⚡ Performance" },
    { message = "^refactor", group = "<!-- 5 -->🔧 Refactor" },
    { message = "^doc", group = "<!-- 6 -->📖 Documentation" },
    { message = "^test", group = "<!-- 7 -->🧪 Testing" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore", group = "<!-- 8 -->⚙️ Miscellaneous" },
    { message = "^build", group = "<!-- 9 -->🏗️ Build" },
    { message = "^Merge", group = "<!-- A -->🗃️ Pull Requests" },
    { body = ".*", group = "<!-- X -->Other (unconventional)" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# use elecord's tag pattern
tag_pattern = "v2.*"
